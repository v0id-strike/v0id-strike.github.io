<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Void-Strike's Cyber Security Journey">
    <title>{{ title or "Void-strike" }}</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
</head>
<body>
    <div class="tech-overlay"></div>
    <nav class="nav">
        <div class="container nav-container">
            <a href="/" class="nav-logo">
                <span class="logo-text">Void-Strike</span>
                <span class="logo-cursor">_</span>
            </a>
            <div class="nav-links">
                <a href="/" class="nav-link" data-text="Home">Home</a>
                <a href="#notes" class="nav-link" data-text="Notes">Notes</a>
                <a href="#projects" class="nav-link" data-text="Projects">Projects</a>
                <a href="#about" class="nav-link" data-text="About">About</a>
            </div>
        </div>
    </nav>

    <main>
        {{ content | safe }}
    </main>
    
    <footer class="footer">
        <div class="container footer-content">
            <div class="footer-info">
                <p class="footer-text">
                    <span class="prompt">$</span> echo "¬© {{ page.date.getFullYear() }} Void-Strike"
                </p>
            </div>
            <div class="social-links">
                <a href="https://github.com/v0id-strike" class="social-link" target="_blank" rel="noopener" data-text="GitHub">
                    <span class="link-icon">[</span>GitHub<span class="link-icon">]</span>
                </a>
                <a href="https://t.me/v0id_strike" class="social-link" target="_blank" rel="noopener" data-text="Telegram">
                    <span class="link-icon">[</span>Telegram<span class="link-icon">]</span>
                </a>
            </div>
        </div>
    </footer>
    <script>
        // Terminal functionality
        document.addEventListener('DOMContentLoaded', () => {
            const terminalInput = document.getElementById('terminalInput');
            const terminalOutput = document.getElementById('terminalOutput');
            let currentPath = '/notes';  // Start from /notes directory
            let commandHistory = [];
            let historyIndex = -1;

            // Add welcome message and show initial directory contents
            const welcomeMessage = `
<span class="welcome-header">Welcome to Void-Strike's Terminal</span>
<span class="welcome-text">Type <span class="command-name">help</span> to see available commands</span>
<span class="welcome-text">Current directory: <span class="path">/notes</span></span>
            `;
            terminalOutput.innerHTML = welcomeMessage;

            function getCurrentDirectoryContents() {
                if (currentPath === '/notes') {
                    const rootDir = document.getElementById('lsOutput');
                    if (rootDir) {
                        const folders = rootDir.querySelectorAll('.tree-folder');
                        let output = '';
                        folders.forEach(folder => {
                            const folderName = folder.querySelector('.folder-name').textContent;
                            output += `<div class="tree-folder" data-path="/notes/${folderName}">
                                <div class="folder-header">
                                    <span class="folder-icon">üìÅ</span>
                                    <span class="folder-name">${folderName}</span>
                                </div>
                            </div>`;
                        });
                        return output;
                    }
                    return null;
                }

                const pathParts = currentPath.split('/').filter(Boolean);
                let currentElement = document.getElementById('lsOutput');
                
                // Navigate to the current directory
                for (const part of pathParts) {
                    const nextElement = currentElement.querySelector(`[data-path="/notes/${part}"]`);
                    if (nextElement) {
                        currentElement = nextElement.querySelector('.tree-files');
                    } else {
                        return null;
                    }
                }
                
                if (currentElement) {
                    const files = currentElement.querySelectorAll('.tree-file');
                    let output = '';
                    files.forEach(file => {
                        const fileName = file.querySelector('.file-name').textContent;
                        const fileDesc = file.querySelector('.file-description')?.textContent || '';
                        output += `<div class="tree-file" data-path="${file.getAttribute('data-path')}" data-content="${file.getAttribute('data-content')}">
                            <span class="file-icon">‚îî‚îÄ‚îÄ üìÑ</span>
                            <span class="file-name">${fileName}</span>
                            ${fileDesc ? `<span class="file-description">${fileDesc}</span>` : ''}
                        </div>`;
                    });
                    return output;
                }
                
                return null;
            }

            // Show initial directory contents
            const initialLsOutput = document.getElementById('lsOutput');
            if (initialLsOutput) {
                const folders = initialLsOutput.querySelectorAll('.tree-folder');
                let output = '';
                folders.forEach(folder => {
                    const folderName = folder.querySelector('.folder-name').textContent;
                    output += `<div class="tree-folder" data-path="/notes/${folderName}">
                        <div class="folder-header">
                            <span class="folder-icon">üìÅ</span>
                            <span class="folder-name">${folderName}</span>
                        </div>
                    </div>`;
                });
                terminalOutput.innerHTML = welcomeMessage + output;
            } else {
                terminalOutput.innerHTML = welcomeMessage;
            }

            function createTerminalLine(command, output = '') {
                const line = document.createElement('div');
                line.className = 'terminal-line';
                
                const prompt = document.createElement('span');
                prompt.className = 'prompt';
                prompt.textContent = '$';
                
                const cmd = document.createElement('span');
                cmd.className = 'command';
                cmd.textContent = command;
                
                line.appendChild(prompt);
                line.appendChild(cmd);
                
                if (output) {
                    const outputDiv = document.createElement('div');
                    outputDiv.className = 'command-output';
                    outputDiv.innerHTML = output;
                    line.appendChild(outputDiv);
                }
                
                return line;
            }

            function executeCommand(command) {
                const [cmd, ...args] = command.trim().split(' ');
                
                switch(cmd.toLowerCase()) {
                    case 'ls':
                        const currentDir = getCurrentDirectoryContents();
                        if (currentDir !== null) {
                            terminalOutput.appendChild(createTerminalLine(command, currentDir));
                        } else {
                            terminalOutput.appendChild(createTerminalLine(command, '<span class="error">Directory not found</span>'));
                        }
                        break;
                        
                    case 'cd':
                        if (!args[0] || args[0] === '..') {
                            currentPath = '/notes';  // Always go back to root
                        } else {
                            const newPath = `${currentPath}/${args[0]}`.replace(/\/+/g, '/');
                            const targetDir = document.querySelector(`[data-path="${newPath}"]`);
                            if (targetDir && targetDir.classList.contains('tree-folder')) {
                                currentPath = newPath;
                            } else {
                                terminalOutput.appendChild(createTerminalLine(command, '<span class="error">Directory not found</span>'));
                            }
                        }
                        terminalOutput.appendChild(createTerminalLine(command, `<span class="path">Current directory: ${currentPath}</span>`));
                        break;
                        
                    case 'cat':
                        if (args[0]) {
                            const file = document.querySelector(`[data-path$="${args[0]}"]`);
                            if (file && file.classList.contains('tree-file')) {
                                const content = file.getAttribute('data-content');
                                const fileContent = document.createElement('div');
                                fileContent.className = 'file-content';
                                
                                const header = document.createElement('div');
                                header.className = 'file-content-header';
                                header.textContent = `File: ${args[0]}`;
                                
                                const contentDiv = document.createElement('div');
                                contentDiv.textContent = content;
                                
                                fileContent.appendChild(header);
                                fileContent.appendChild(contentDiv);
                                
                                terminalOutput.appendChild(createTerminalLine(command, fileContent.outerHTML));
                            } else {
                                terminalOutput.appendChild(createTerminalLine(command, '<span class="error">File not found</span>'));
                            }
                        } else {
                            terminalOutput.appendChild(createTerminalLine(command, '<span class="error">Please specify a file</span>'));
                        }
                        break;
                        
                    case 'clear':
                        terminalOutput.innerHTML = '';
                        break;
                        
                    case 'help':
                        const helpText = `
<span class="help-header">Available commands:</span>
  <span class="command-name">ls</span>              - List directory contents
  <span class="command-name">cd [directory]</span>  - Change directory
  <span class="command-name">cat [file]</span>      - Display file contents
  <span class="command-name">clear</span>           - Clear terminal
  <span class="command-name">help</span>            - Show this help message
                        `;
                        terminalOutput.appendChild(createTerminalLine(command, helpText));
                        break;
                        
                    default:
                        if (command.trim()) {
                            terminalOutput.appendChild(createTerminalLine(command, '<span class="error">Command not found. Type "help" for available commands.</span>'));
                        }
                }
                
                if (command.trim()) {
                    commandHistory.push(command);
                    historyIndex = commandHistory.length;
                }
            }

            terminalInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    const command = terminalInput.value;
                    executeCommand(command);
                    terminalInput.value = '';
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (historyIndex > 0) {
                        historyIndex--;
                        terminalInput.value = commandHistory[historyIndex];
                    }
                } else if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    if (historyIndex < commandHistory.length - 1) {
                        historyIndex++;
                        terminalInput.value = commandHistory[historyIndex];
                    } else {
                        historyIndex = commandHistory.length;
                        terminalInput.value = '';
                    }
                }
            });
        });
    </script>
</body>
</html>